<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>My Site Blog</title>
        <link>https://reantoilpc.github.io/en/blog</link>
        <description>My Site Blog</description>
        <lastBuildDate>Thu, 29 Dec 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[miniProfiler 使用介紹]]></title>
            <link>https://reantoilpc.github.io/en/blog/2022-12-29-miniProfiler-guide</link>
            <guid>2022-12-29-miniProfiler-guide</guid>
            <pubDate>Thu, 29 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[使用原因]]></description>
            <content:encoded><![CDATA[<h2>使用原因</h2><p>最近協助團隊優化排程執行效率，想要解決執行效率不好問題，就需要知道問題出在那個環節才能進行修正。過去在處理這類問題，都是用肉眼看程式碼和經驗來判斷，而這樣方式很沒有效率，而且不一定改對方向，反而花大量時間卻沒有解決真正問題。</p><p>為了有效率的找出問題點在那裡，導入<code>miniProfiler</code>該套件，該套件不止可以有效記錄程式執行所花費時間，更可以記錄SQL執行花費時間及產生相對的語法，方便調整SQL語法。</p><h2>MiniProfiler 介紹</h2><p>MiniProfiler 是一個專門分析應用系統和UI介面的工具，透過工具可以解析出程式所花費時間，以及執行那些程式碼，有這些內容可以幫助我們調整優化系統效能。</p><h2>如何使用</h2><p>安裝相關套件</p><ul><li>MiniProfiler.AspNetCore</li><li>MiniProfiler.AspNetCore.Mvc</li><li>MiniProfiler.EntityFrameworkCore</li></ul><p><a href="https://localhost:64137/profiler/results-index">監控路徑</a></p><p>Startup.cs 設定</p><pre><code class="language-C#">
    services.AddMiniProfiler(options =&gt;
    {
        //訪問地址路由根目錄；預設為：/mini-profiler-resources
        options.RouteBasePath = &quot;/profiler&quot;;
        //資料快取時間
        (options.Storage as MemoryCacheStorage).CacheDuration = TimeSpan.FromMinutes(3);
        //sql格式化設定
        options.SqlFormatter = new InlineFormatter();
        //跟蹤連線開啟關閉
        options.TrackConnectionOpenClose = true;
        //介面主題顏色方案;預設淺色
        options.ColorScheme = ColorScheme.Dark;
        //.net core 3.0以上：對MVC過濾器進行分析
        // options.EnableMvcFilterProfiling = true;
        //對檢視進行分析
        // options.EnableMvcViewProfiling = true;

        //控制訪問頁面授權，預設所有人都能訪問
        //options.ResultsAuthorize;
        //要控制分析哪些請求，預設說有請求都分析
        //options.ShouldProfile;

        //內部異常處理
        //options.OnInternalError = e =&gt; MyExceptionLogger(e);
        options.IgnorePath(&quot;/health&quot;);
        options.IgnorePath(&quot;/swagger&quot;);

    }).AddEntityFramework();
    
    
    app.UseMiniProfiler();

</code></pre><h2>用法</h2><pre><code class="language-C#">    var miniProfiler = MiniProfiler.StartNew(&quot;更新服務的支付工具&quot;);
    using (miniProfiler.Step(&quot;RefreshSubscribedService&quot;))
    {
        // 監控的程式碼
    }
    miniProfiler.Stop();
</code></pre><h2>使用套件</h2><p>使用 AOP 套件建立 MiniProfiler.Extensions 套件</p><pre><code class="language-C#">
    [Profiler(&quot;Test&quot;,&quot;RefreshSubscribedService&quot;)]
    public async Task&lt;bool&gt; RefreshSubscribedService(string Id)
    {
        
    }

</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[efcore 使用介紹]]></title>
            <link>https://reantoilpc.github.io/en/blog/2022-08-17-efcore-guide</link>
            <guid>2022-08-17-efcore-guide</guid>
            <pubDate>Wed, 17 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[EFCore 建議寫法]]></description>
            <content:encoded><![CDATA[<h2>EFCore 建議寫法</h2><h3>Repository 回傳</h3><p>Repository 設計概念，希望透過傳入條件值篩選資料出來。如果單純查詢一個資料表這樣寫法沒有問題，但通常在顯示或是處理資料，不會只有查一個資料表，往往都要查詢好幾個資料表，進行 Join 後才是我們要的結果。</p><p>如果 Repository 回傳是 IEnumerable、List、Array 這些類型，等同於立刻執行一段 SQL 語法，意思就是 Join 幾個資料表就執行幾次 SQL 語法，這樣寫法是很消耗資料庫效能，而且執行效率也比較慢，因為是分別 Query 資料表並沒有使用到 SQL Join 功能。</p><p>在 EFCore 可以使用 IQueryable 進行延遲執行取得資料，意思就是無論 Join 幾個資料表，都還不會Query 資料表，而是等到 ToListAsync ，EFCore 才會產生相對應的 SQL 語法，這時候就會組出 SQL Join 語法，好處就是只對資料庫查詢一次、而且是篩選過的資料，在網路傳輸也會比較快一些。</p><pre><code class="language-C#">    // Bad
    public IEnumerable&lt;EpkAccAccount&gt; Find(Expression&lt;Func&lt;EpkAccAccount, bool&gt;&gt; expression)
    {
        return _context.EpkAccAccount.Where(expression);
    }

    // Good
    public IQueryable&lt;EpkAccAccount&gt; FindAsync(Expression&lt;Func&lt;EpkAccAccount, bool&gt;&gt; expression)
    {
        return expression == null ? _context.EpkAccAccount : _context.EpkAccAccount.Where(expression);
    }    
</code></pre><h3>Select 必要欄位</h3><p>使用 SQL 查詢，官方不建議 <code>select * from table</code> 查出所有欄位，只要針對需要欄位就可以。使用 EFCore 也是如此，如果不指定欄位，直接回傳 Entity 就會把所有欄位查詢出來。</p><p>建議在查詢時候，針對必要欄位查詢就可以，才不會造成非必要查詢效能浪費。</p><pre><code class="language-C#">
    // Bad
    var epkAccId = &quot;6006746649&quot;;
    IEnumerable&lt;EpkAccAccount&gt; epkAccAccount = _context.EpkAccAccount.Where(x =&gt; x.EpkAccId == epkAccId).ToListAsync();

    // Good
    var epkAccId = &quot;6006746649&quot;;
    IEnumerable&lt;AccountDto&gt; accountDto = _context.EpkAccAccount
                                        .Where(x =&gt; x.EpkAccId == epkAccId)
                                        .Select(x =&gt; new AccountDto 
                                        { 
                                            EpkAccId = x.EpkAccId, Lpr = x.Lpr, IdNo = x.IdNo 
                                        })
                                        .ToListAsync();

</code></pre><h3>Like 查詢</h3><p>在 EFCore Link 查詢，不建議使用 <code>StartsWith</code>, <code>EndsWith</code>, <code>Contains</code> 這幾個關鍵字查詢，EFCore 並不會轉換成 SQL Like，反而會轉換使用 SQL 函數查詢，雖然查詢結果一樣，但當資料量大時，查詢的效率就會變差。</p><p>在 EFCore 使用 <code>StartsWith</code>, <code>EndsWith</code>, <code>Contains</code> 關鍵字查詢，對應產生 SQL 語法</p><pre><code class="language-SQL">
    -- Contains
    SELECT [traTx].[TRA_TX_ID], [traTx].[CHANNEL_CODE], [traTx].[TRANSACTION_TIME]
    FROM [EPK_ACC_TRA_TX] AS [traTx]
    WHERE CHARINDEX(&#x27;P96&#x27;, [traTx].[CHANNEL_CODE]) &gt; 0 OR &#x27;P96&#x27; = N&#x27;&#x27;

    -- StartsWith
    SELECT [traTx].[TRA_TX_ID], [traTx].[CHANNEL_CODE], [traTx].[TRANSACTION_TIME]
    FROM [EPK_ACC_TRA_TX] AS [traTx]
    WHERE LEFT([traTx].[CHANNEL_CODE], LEN(&#x27;P96&#x27;)) = &#x27;P96&#x27; OR &#x27;P96&#x27; = N&#x27;&#x27;

    -- EndsWith
    SELECT [traTx].[TRA_TX_ID], [traTx].[CHANNEL_CODE], [traTx].[TRANSACTION_TIME]
    FROM [EPK_ACC_TRA_TX] AS [traTx]
    WHERE RIGHT([traTx].[CHANNEL_CODE], LEN(&#x27;P96&#x27;)) = &#x27;P96&#x27; OR &#x27;P96&#x27; = N&#x27;&#x27;

</code></pre><p>如果要 Like 查詢，請要改用 <code>EF.Functions</code> 來查詢。</p><pre><code class="language-C#">    // Bad
    var channelCode = &quot;P96&quot;;
    _context.EpkAccTraTx.Where(x =&gt; x.ChannelCode.StartsWith(channelCode));

    // Good
    var channelCode = &quot;P96&quot;;
    _context.EpkAccTraTx.Where(x =&gt; EF.Functions.Like(x.ChannelCode, $&quot;{channelCode}%&quot;));   
</code></pre><h3>Inner Join</h3><pre><code class="language-C#">
    var smsHistories = _context.EpkAccSmshistory;
    var traTxs = _context.EpkAccTraTx;

    var traNoticeViews = await
    (
        from sms in smsHistories join traTx in traTxs on sms.TraTxId equals traTx.TraTxId
        where traTx.ServiceId == 6 &amp;&amp; traTx.TransactionCode == &quot;01&quot; 
        select new TraNoticeView
        {
            ChannelCode = traTx.ChannelCode,
            OpenFilter = sms.OpenFilter,
            TransactionDate = traTx.TransactionTime.Date,
            Filter = sms.Filter
        }
    ).ToListAsync();

</code></pre><h3>Left Join</h3><pre><code class="language-C#">
    var smsHistories = _context.EpkAccSmshistory;
    var traTxs = _context.EpkAccTraTx;

    var traNoticeViews = await
    (
        from sms in smsHistories join traTx in traTxs on sms.TraTxId equals traTx.TraTxId into histories
        from sms in histories.DefaultIfEmpty()
        where traTx.ServiceId == 6 &amp;&amp; traTx.TransactionCode == &quot;01&quot; 
        select new TraNoticeView
        {
            ChannelCode = traTx.ChannelCode,
            OpenFilter = sms.OpenFilter,
            TransactionDate = traTx.TransactionTime.Date,
            Filter = sms.Filter
        }
    ).ToListAsync();

</code></pre><h3>Group By</h3><pre><code class="language-C#">    var smsHistories = _context.EpkAccSmshistory;
    var traTxs = _context.EpkAccTraTx;

    var traNoticeViews = await
    (
        from sms in smsHistories join traTx in traTxs on sms.TraTxId equals traTx.TraTxId into histories
        from sms in histories.DefaultIfEmpty()
        where traTx.ServiceId == 6 &amp;&amp; traTx.TransactionCode == &quot;01&quot; 
        select new TraNoticeView
        {
            ChannelCode = traTx.ChannelCode,
            OpenFilter = sms.OpenFilter,
            TransactionDate = traTx.TransactionTime.Date,
            Filter = sms.Filter
        }
    )
    .GroupBy(x =&gt; new {x.TransactionDate, x.Filter})
    .ToDictionaryAsync(x =&gt; x.Key, x =&gt; new TraNoticeArrivalCount
    {
        TransactionDate = x.Key.TransactionDate,
        Filter = x.Key.Filter,
        ArrivalCount = x.Count()
    });
                             
</code></pre><h3>EFCore WithNoLock</h3><p>在 MS SQL 下 Select 語法，通常會建議加上<code>WithNoLock</code>，避免 Select 資料表，同時間該資料正在異動中，暫時性的 Lock 等待作業完成期間，造成使用者連線 Timeout 的問題。</p><p>雖然 EFCore 不支援自動補上 WithNoLock 的語法，但可以透過<code>IsolationLevel</code>（交易隔離等級）達到同樣的效果。</p><p>隔離等級有分這幾種，各個差異如下（預設為ReadCommitted）：
| 隔離等級 | 說明 |
| -- | -- |
| Chaos | 無法覆寫來自隔離程度更深之交易的暫止變更 |
| ReadCommitted | 在交易期間無法讀取 Volatile 資料，但可以修改該資料 |
| ReadUncommitted | 在交易期間可以讀取和修改 Volatile 資料。 |
| RepeatableRead | 在交易期間可以讀取 Volatile 資料，但無法修改該資料。 在交易期間可以加入新資料。 |
| Serializable | 在交易期間可以讀取 Volatile 資料，但無法修改該資料，且不能加入新資料。 |
| Snapshot | 可以讀取 Volatile 資料。 交易會在修改資料之前，先驗證在最初讀取資料後是否有另一個交易已變更該資料。 如果資料已更新，則會引發錯誤， 如此可允許交易回到先前所認可的資料值。當您升級使用 Snapshot 隔離層級建立的交易時，會擲回具有錯誤訊息「無法升級 IsolationLevel 為快照的交易」的 InvalidOperationException。 |
| Unspecified | 使用與指定不同的隔離等級，但無法判斷該等級。 如果設定這個值，會擲回例外狀況。 |</p><p>要避免上述該問題，一般指定隔離等級為 ReadUncommitted。</p><p>在程式裡要使用<code>WithNoLock</code>功能，要先從下載<code>Fetc.Core.EntityFramewrokCore</code>套件，只要回傳資料類型是<code>IQueryable</code>就可以使用，使用範例如下。</p><pre><code class="language-C#">
    var repository = _epkUnitOfWork.GetRepository&lt;EpkExcWhitelist&gt;();
    var epkWhitelistDtos = repository.GetAll(x =&gt; x.UploadDate &gt; startDate &amp;&amp; x.UploadDate &lt;= endDate)
                                     .ToListWithNoLock();

</code></pre><h2>SaveChanges</h2><p>EFCore 是透過<code>DbContext.DbSet&lt;T&gt;</code>對資料進行Add、Update、Remov，當下還不會寫入資料庫，而是延遲到<code>SaveChanges</code>後才會真正寫入資料庫，而每次呼叫<code>SaveChanges</code>時，多筆資料異動指令會自動包成一個 Transaction，任一個動作失敗均會觸發 Rollback。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Produces Attribute 全域設定]]></title>
            <link>https://reantoilpc.github.io/en/blog/2022-08-02-global-produces-attribute</link>
            <guid>2022-08-02-global-produces-attribute</guid>
            <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Application model]]></description>
            <content:encoded><![CDATA[<h2>Application model</h2><p>Application Model 定義 MVC 應用中各種對象和行為，包含Application、Controller、Action、Parameter、Router、Page、Property、Filter等等，上述的功能可以透過<code>慣例</code>(convention)來擴充客製自己的需求，並設定全域或屬性來使用</p><p>ASP.NET Core MVC 透過 IApplicationModelProvider 定義擴充的類別來載入應用程式，官方建議沒有特別需求，盡量不使用<code>provider pattern</code>而是使用<code>conventions</code>進行功能擴充</p><h2>實作 ProduceResponseTypeModelConvention</h2><p>在網路上查到的程式範例都是繼承<code>IApplicationModelProvider</code>因此我改用<code>IApplicationModelConvention</code>來實作，範例如下</p><pre><code class="language-C#">
public class ProduceResponseTypeModelConvention : IApplicationModelConvention
{
    public void Apply(ApplicationModel application)
    {
        foreach (var controller in application.Controllers)
        {
            foreach (var action in controller.Actions)
            {
                Type? returnType = null;
                if (action.ActionMethod.ReturnType.GenericTypeArguments.Any())
                {
                    if (action.ActionMethod.ReturnType.GenericTypeArguments[0].GetGenericArguments().Any())
                    {
                        returnType = action.ActionMethod.ReturnType.GenericTypeArguments[0].GetGenericArguments()[0];
                    }
                }

                AddUniversalStatusCodes(action, returnType);
                
                var actionParametersExist = action.Parameters.Any();
                if (actionParametersExist)
                {
                    AddProducesResponseTypeAttribute(action, typeof(void), StatusCodes.Status404NotFound);
                }
            }
        }

        void AddUniversalStatusCodes(ActionModel action, Type? returnType)
        {
            AddProducesResponseTypeAttribute(action, returnType, StatusCodes.Status200OK);
            AddProducesResponseTypeAttribute(
                action, typeof(ExceptionResponse), StatusCodes.Status500InternalServerError);
        }

        void AddProducesResponseTypeAttribute(ActionModel action, Type? returnType, int statusCodeResult)
        {
            if (returnType != null)
            {
                action.Filters.Add(new ProducesResponseTypeAttribute(returnType, statusCodeResult));
            }
            else if (returnType is null)
            {
                action.Filters.Add(new ProducesResponseTypeAttribute(statusCodeResult));
            }
        }
    }
}

</code></pre><pre><code class="language-C#">
// 擴充功能注入
service.AddControllers(options =&gt;
{
    options.Conventions.Add(new ProduceResponseTypeModelConvention());
})

</code></pre><h2>參考資料來源</h2><p><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/application-model?view=aspnetcore-6.0">官方文件說明</a>
<a href="https://www.cnblogs.com/hohoa/p/12134019.html">在Asp.Net Core中使用ModelConvention实现全局过滤器隔离</a>
<a href="https://stackoverflow.com/questions/58047020/net-core-api-make-producesresponsetype-global-parameter-or-automate">Net Core API: Make ProducesResponseType Global Parameter or Automate</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Enums.NET 使用]]></title>
            <link>https://reantoilpc.github.io/en/blog/2022-07-21-nuget-package-Enums.NET</link>
            <guid>2022-07-21-nuget-package-Enums.NET</guid>
            <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[使用原因]]></description>
            <content:encoded><![CDATA[<h2>使用原因</h2><p>最近在協助團隊在舊的專案底下開發新 API 功能，該功能是從資料庫取得資料後，經過過濾和整理再回傳前端頁面。
目前遇到一個小問題，該資料的某個欄位存的是<code>A</code>、<code>D</code>、<code>U</code>在前端頁面顯示分別新增、刪除、修改，在顯示上都需要<code>HardCode</code>處理，這樣的寫法造成程式碼的<code>壞味道（Bad Smell）</code>出現。</p><pre><code class="language-C#">
if (actionStatus == &quot;A&quot;) { retrun &quot;新增&quot;; }
if (actionStatus == &quot;D&quot;) { retrun &quot;刪除&quot;; }
if (actionStatus == &quot;U&quot;) { retrun &quot;更新&quot;; }

</code></pre><h2>壞味道（Bad Smell）</h2><p>為什麼HardCode方式，會有壞味道（Bad Smell）出現呢?
因為當<code>actionStatus</code>又增加一種類型，例如<code>Q</code>查詢，勢必就要加一行程式，這樣就違反開放封閉原則</p><h2>改善方式</h2><p>即然要解決HardCode問題，就要把<code>A</code>、<code>D</code>、<code>U</code>的定義要移到另一個Class或是Enum上面，而不是散落在各程式碼裡。目前想到有二個套件，可以解決我的問題</p><ol><li><a href="https://github.com/ardalis/SmartEnum">SmartEnum</a></li><li><a href="https://github.com/TylerBrinkley/Enums.NET">Enums.NET</a></li></ol><p>後來決定使用Enums.NET，原因是</p><ul><li>因為舊的專案已經在使用Enum，如果導入<code>SmartEnum</code>新的做法造成維護上的混亂。</li><li>Enums.NET比較類似原有的Enum的使用方式，比較容易理解。</li></ul><h2>先建立<code>SymbolAttribute</code>和<code>ActionStatusEnum</code></h2><pre><code class="language-C#">
// SymbolAttribute
[AttributeUsage(AttributeTargets.Field)]
public class SymbolAttribute : Attribute
{
    public string Symbol { get; }

    public SymbolAttribute(string symbol)
    {
        Symbol = symbol;
    }
}

// ActionStatusEnum
public enum ActionStatusEnum
{
    [Symbol(&quot;A&quot;)]
    [Description(&quot;新增&quot;)]
    Add,

    [Symbol(&quot;D&quot;)]
    [Description(&quot;刪除&quot;)]
    Delete,

    [Symbol(&quot;U&quot;)]
    [Description(&quot;更新&quot;)]
    Update
}

</code></pre><h2>使用<code>Enums.NET</code>取得文字說明</h2><pre><code class="language-C#">
// Get SymbolAttribute Format
var symbolFormat = Enums.RegisterCustomEnumFormat(x =&gt; x.Attributes.Get&lt;SymbolAttribute&gt;()?.Symbol);

// Return Description
if (Enums.TryParse&lt;ActionStatusEnum&gt;(actionStatus, false, out var status, symbolFormat))
{
    return status.AsString(EnumFormat.Description);
}

</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Postman 環境變數設定]]></title>
            <link>https://reantoilpc.github.io/en/blog/postman-environment-variable</link>
            <guid>postman-environment-variable</guid>
            <pubDate>Tue, 31 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Postman Environment Variable 簡介]]></description>
            <content:encoded><![CDATA[<h2>Postman Environment Variable 簡介</h2><p>Postman 是一套測試 API 工具，藉著 Environment Variable 的設定，可以很方便切換環境，進行 API 功能驗證，概念很像 asp.net 的 appsettings，只要設定好要置換的內容，就可以使用。</p><h2>Environment Variable 設定</h2><ul><li>在 Environment 設定不同環境</li></ul><p><img src="./pictures/2022-05-31/2022-05-31-environment-variable-01.png" alt="image"/></p><ul><li>設定 Variable Name 和 Value</li></ul><p><img src="./pictures/2022-05-31/2022-05-31-environment-variable-02.png" alt="image"/></p><ul><li>使用 Variable 取代原本 Api Url</li></ul><p><img src="./pictures/2022-05-31/2022-05-31-environment-variable-03.png" alt="image"/></p><h2>透過 Response 回寫 Environment Variable</h2><p>使用 Postman 測試 API 會要使用 AccessToken 進行權限的驗證，因此在測試前需要先登入取得 AccessToken 然後複製貼上 Auth 對應欄位，有幾支 API 就要複製幾次，非常麻煩，因此可以透過 Environment Variable 簡化重複貼上的動作。</p><ul><li>先設定 AccessToken 變數，放在 Auth 對應欄位</li></ul><p><img src="./pictures/2022-05-31/2022-05-31-environment-variable-04.png" alt="image"/></p><ul><li>在取得 AccessToken API 的 Tests 裡輸入 Javascript 語法，當成功取得 AccessToken 回寫 Environment Variable</li></ul><p><img src="./pictures/2022-05-31/2022-05-31-environment-variable-05.png" alt="image"/></p><pre><code class="language-javascript">var jsonData = JSON.parse(responseBody);
pm.environment.set(&quot;AccessToken&quot;, jsonData);
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://reantoilpc.github.io/en/blog/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img src="./docusaurus-plushie-banner.jpeg" alt="Docusaurus Plushie"/></p><p>The blog supports tags as well!</p><p><strong>And if you don&#x27;t want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://reantoilpc.github.io/en/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/">MDX</a>.</p><p>:::tip</p><p>Use the power of React to create interactive blog posts.</p><pre><code class="language-js">&lt;button onClick={() =&gt; alert(&#x27;button clicked!&#x27;)}&gt;Click me!&lt;/button&gt;
</code></pre><button>Click me!</button><p>:::</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Long Blog Post]]></title>
            <link>https://reantoilpc.github.io/en/blog/long-blog-post</link>
            <guid>long-blog-post</guid>
            <pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[First Blog Post]]></title>
            <link>https://reantoilpc.github.io/en/blog/first-blog-post</link>
            <guid>first-blog-post</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></description>
            <content:encoded><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
        </item>
    </channel>
</rss>